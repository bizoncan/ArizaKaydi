// <auto-generated />
using System;
using DataAccessLayer.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(context))]
    [Migration("20250407121239_mg_workorder")]
    partial class mg_workorder
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EntityLayer.Concrete.error", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<DateTime>("errorDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("errorDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("errorEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("errorImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("errorImageBytes")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("errorImageType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("errorType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("machineId")
                        .HasColumnType("int");

                    b.Property<int?>("machinePartId")
                        .HasColumnType("int");

                    b.Property<int?>("userId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("machineId");

                    b.HasIndex("machinePartId");

                    b.HasIndex("userId");

                    b.ToTable("Errors");
                });

            modelBuilder.Entity("EntityLayer.Concrete.imageCollection", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int?>("errorId")
                        .HasColumnType("int");

                    b.Property<byte[]>("imageDataByte")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("id");

                    b.HasIndex("errorId");

                    b.ToTable("ImageCollection");
                });

            modelBuilder.Entity("EntityLayer.Concrete.machine", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imgURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("number")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("EntityLayer.Concrete.machineNotifications", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("machineId")
                        .HasColumnType("int");

                    b.Property<int?>("machinePartId")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("machineId");

                    b.HasIndex("machinePartId");

                    b.ToTable("MachineNotifications");
                });

            modelBuilder.Entity("EntityLayer.Concrete.machinePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("machineId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("machineId");

                    b.ToTable("MachineParts");
                });

            modelBuilder.Entity("EntityLayer.Concrete.machinePartError", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("machinePartId")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("machinePartId");

                    b.ToTable("MachinePartsError");
                });

            modelBuilder.Entity("EntityLayer.Concrete.user", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EntityLayer.Concrete.workOrder", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isClosed")
                        .HasColumnType("bit");

                    b.Property<int?>("machineId")
                        .HasColumnType("int");

                    b.Property<int?>("machniePartId")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("workOrderEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("workOrderStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("machineId");

                    b.HasIndex("machniePartId");

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("EntityLayer.Concrete.error", b =>
                {
                    b.HasOne("EntityLayer.Concrete.machine", "machines")
                        .WithMany()
                        .HasForeignKey("machineId");

                    b.HasOne("EntityLayer.Concrete.machinePart", "machinePartName")
                        .WithMany()
                        .HasForeignKey("machinePartId");

                    b.HasOne("EntityLayer.Concrete.user", "userName")
                        .WithMany()
                        .HasForeignKey("userId");

                    b.Navigation("machinePartName");

                    b.Navigation("machines");

                    b.Navigation("userName");
                });

            modelBuilder.Entity("EntityLayer.Concrete.imageCollection", b =>
                {
                    b.HasOne("EntityLayer.Concrete.error", "errorName")
                        .WithMany()
                        .HasForeignKey("errorId");

                    b.Navigation("errorName");
                });

            modelBuilder.Entity("EntityLayer.Concrete.machineNotifications", b =>
                {
                    b.HasOne("EntityLayer.Concrete.machine", "machineName")
                        .WithMany()
                        .HasForeignKey("machineId");

                    b.HasOne("EntityLayer.Concrete.machinePart", "machinePartName")
                        .WithMany()
                        .HasForeignKey("machinePartId");

                    b.Navigation("machineName");

                    b.Navigation("machinePartName");
                });

            modelBuilder.Entity("EntityLayer.Concrete.machinePart", b =>
                {
                    b.HasOne("EntityLayer.Concrete.machine", "machineName")
                        .WithMany()
                        .HasForeignKey("machineId");

                    b.Navigation("machineName");
                });

            modelBuilder.Entity("EntityLayer.Concrete.machinePartError", b =>
                {
                    b.HasOne("EntityLayer.Concrete.machinePart", "machinePart")
                        .WithMany()
                        .HasForeignKey("machinePartId");

                    b.Navigation("machinePart");
                });

            modelBuilder.Entity("EntityLayer.Concrete.workOrder", b =>
                {
                    b.HasOne("EntityLayer.Concrete.machine", "machine")
                        .WithMany()
                        .HasForeignKey("machineId");

                    b.HasOne("EntityLayer.Concrete.machinePart", "machniePart")
                        .WithMany()
                        .HasForeignKey("machniePartId");

                    b.Navigation("machine");

                    b.Navigation("machniePart");
                });
#pragma warning restore 612, 618
        }
    }
}
