@using EntityLayer.Concrete
@model List<workOrder>
@{
	Layout = "~/Views/Shared/_Layout.cshtml";
	bool isMachineSelectedInitially = ViewBag.SelectedMachineId != null && (int)ViewBag.SelectedMachineId > 0;


}


<a href="/Work/AddWorkOrder/" class="btn btn-info"> Yeni İş Emri Ekle</a>
<button id="excelAktarBtn" class="btn btn-excel">Excel'e Aktar</button>
<div id="loadingIndicator" style="display: none; margin-top: 10px;">
	<span class="text-info">Excel dosyası oluşturuluyor, lütfen bekleyin...</span>
</div>

<br />
<br />
<div class="row mb-4">
	<div class="col-md-12">
		<div class="card bg-default shadow">
			<div class="card-header">
				<h4>Filtreler</h4>
			</div>
			<div class="card-body">
				<form id="filterForm" method="get" action="@Url.Action("Index", "Work")">
					@Html.AntiForgeryToken()
					<div class="row">
						<div class="col-md-3">
							<div class="form-group">
								<label for="startDate">Başlangıç Tarihi</label>
								<input type="date" id="startDate" name="startDate" class="form-control" value="@ViewBag.StartDate" onchange="updateEndDateMin()">
							</div>
						</div>
						<div class="col-md-3">
							<div class="form-group">
								<label for="endDate">Bitiş Tarihi</label>
								<input type="date" id="endDate" name="endDate" class="form-control" value="@ViewBag.EndDate" min="@ViewBag.StartDate">
							</div>
						</div>
						<div class="col-md-3">
							<div class="form-group">
								<label for="machineId">Makine</label>
								<select id="machineId" name="machineId" class="form-control select2">
									<option value="">Tümü</option>
									@if (ViewBag.SelectedMachineId == 0)
									{
										<option value="0" selected>Makine Bilgisi Yok</option>
									}
									else
									{
										<option value="0">Makine Bilgisi Yok</option>
									})
									@foreach (var part in (List<machine>)ViewBag.Machines)
									{
										if (ViewBag.SelectedMachineId != null && (int)ViewBag.SelectedMachineId == part.id)
										{
											<option value="@part.id" selected>@part.name</option>
										}

										else
										{
											<option value="@part.id">@part.name</option>
										}
									}
								</select>
							</div>
						</div>
						<div class="col-md-3">
							<div class="form-group">
								<label for="machinePartId">Makine Parçası</label>
								<select id="machinePartId" name="machinePartId" class="form-control select2" @(!isMachineSelectedInitially ? "disabled" : "")>
									<option value="">Tümü</option>

									@if (ViewBag.SelectedMachinePartId == 0)
									{
										<option value="0" selected>Makine Parçası Bilgisi Yok</option>
									}
									else
									{
										<option value="0">Makine Parçası Bilgisi Yok</option>
									})
									@if (isMachineSelectedInitially)
									{
										@foreach (var part in (List<machinePart>)ViewBag.MachineParts)
										{
											if (ViewBag.SelectedMachinePartId != null && (int)ViewBag.SelectedMachinePartId == part.Id)
											{
												<option value="@part.Id" selected>@part.name</option>
											}
											else
											{
												<option value="@part.Id">@part.name</option>
											}
										}
									}
								</select>
							</div>
						</div>
						<div class="col-md-3">
							<div class="form-group">
								<label for="userId">Personel</label>
								<select id="userId" name="userId" class="form-control select2" )>
									<option value="">Tümü</option>

									@foreach (var user in (List<user>)ViewBag.MobileUsers)
									{
										if (ViewBag.SelectedUserId != null && (int)ViewBag.SelectedUserId == user.Id)
										{
											<option value="@user.Id" selected>@user.UserName</option>
										}
										else
										{
											<option value="@user.Id">@user.UserName</option>
										}

									}
								</select>
							</div>
						</div>
						<div class="col-md-3">
							<div class="form-group">
								<label for="isClosed">Durum</label>
								<select id="isClosed" name="isClosed" class="form-control select2">
									<option value="">Tümü</option>
									@if (ViewBag.IsClosed?.ToString().ToLower() == "false")
									{
										<option value="false" selected>Sonlanmadı</option>
									}
									else
									{
										<option value="false">Sonlanmadı</option>
									}

									@if (ViewBag.IsClosed?.ToString().ToLower() == "true")
									{
										<option value="true" selected>Sonlandı</option>
									}
									else
									{
										<option value="true">Sonlandı</option>
									}

								</select>
							</div>
						</div>
						<div class="col-md-3 d-flex align-items-end">
							<button type="submit" class="btn btn-primary mr-2">Filtrele</button>
							<a href="@Url.Action("Index", "Work")" class="btn btn-secondary">Filtreleri Temizle</a> @* Düzeltme: Errors yerine Work olmalı muhtemelen *@
						</div>
					</div>
				</form>
			</div>
		</div>
	</div>
</div>

<div class="row">
	<div class="col">
		<div class="card bg-default shadow">
			<div class="card-header bg-transparent border-0">
				<h3 class="text-white mb-0">İş Emirleri</h3>
			</div>
			<div class="table-responsive">
				@* Tablo ID'si eklemek selector için faydalı olabilir ama şart değil *@
				<table id="isEmirleriTablosu" class="table align-items-center table-dark table-flush">
					<thead class="thead-dark">
						<tr>
							@* <th scope="col" class="sort">
								<a href="@Url.Action("Index","Work",new{startDate = ViewBag.StartDate,endDate=ViewBag.EndDate,machineId=ViewBag.SelectedMachineId,machinePartId= ViewBag.SelectedMachinePartId, isClosed = ViewBag.IsClosed,userId = ViewBag.SelectedUserId,sortBy="id",sortOrder=Context.Request.Query["sortOrder"] == "asc" && Context.Request.Query["sortBy"] == "id" ? "desc" : "asc"} )" style="color:#ffffff !important">
									#
									@if (Context.Request.Query["sortBy"] == "id")
									{
										@if (Context.Request.Query["sortOrder"] == "asc")
										{
											<i class="mdi mdi-arrow-up"></i>
										}
										else
										{
											<i class="mdi mdi-arrow-down"></i>
										}
									}
									else
									{
										<i class="mdi mdi-color-helper"></i>
									}
								</a>
							</th> *@
							<th scope="col" class="sort" data-sort="name">İş Emri</th>
							<th scope="col" class="sort" data-sort="name">
								<a href="@Url.Action("Index","Work",new{startDate = ViewBag.StartDate,endDate=ViewBag.EndDate,machineId=ViewBag.SelectedMachineId,machinePartId= ViewBag.SelectedMachinePartId, isClosed = ViewBag.IsClosed,userId = ViewBag.SelectedUserId,sortBy="start",sortOrder= Context.Request.Query["sortOrder"] == "asc" && Context.Request.Query["sortBy"] == "start" ? "desc" : "asc"})" style="color:#ffffff !important">
									İş Emri Başlangıç Tarihi
									@if (Context.Request.Query["sortBy"] == "start")
									{
										@if (Context.Request.Query["sortOrder"] == "asc")
										{
											<i class="mdi mdi-arrow-up"></i>
										}
										else
										{
											<i class="mdi mdi-arrow-down"></i>
										}
									}
									else
									{
										<i class="mdi mdi-color-helper"></i>
									}
								</a>
							</th>
							<th scope="col" class="sort" data-sort="name">
								<a href="@Url.Action("Index","Work",new{startDate = ViewBag.StartDate,endDate=ViewBag.EndDate,machineId=ViewBag.SelectedMachineId,machinePartId= ViewBag.SelectedMachinePartId, isClosed = ViewBag.IsClosed,userId = ViewBag.SelectedUserId,sortBy="end",sortOrder=Context.Request.Query["sortOrder"] == "asc" && Context.Request.Query["sortBy"] == "end" ? "desc" : "asc"})" style="color:#ffffff !important">
									İş Emri Bitiş Tarihi
									@if (Context.Request.Query["sortBy"] == "end")
									{
										@if (Context.Request.Query["sortOrder"] == "asc")
										{
											<i class="mdi mdi-arrow-up"></i>
										}
										else
										{
											<i class="mdi mdi-arrow-down"></i>
										}
									}
									else
									{
										<i class="mdi mdi-color-helper"></i>
									}
								</a>
							</th>
							<th scope="col" class="sort" data-sort="name">
								<a href="@Url.Action("Index","Work",new{startDate = ViewBag.StartDate,endDate=ViewBag.EndDate,machineId=ViewBag.SelectedMachineId,machinePartId= ViewBag.SelectedMachinePartId, isClosed = ViewBag.IsClosed,userId = ViewBag.SelectedUserId,sortBy="machineId",sortOrder=Context.Request.Query["sortOrder"] == "asc" && Context.Request.Query["sortBy"] == "machineId" ? "desc" : "asc"})" style="color:#ffffff !important">
									Makine Adı
									@if (Context.Request.Query["sortBy"] == "machineId")
									{
										@if (Context.Request.Query["sortOrder"] == "asc")
										{
											<i class="mdi mdi-arrow-up"></i>
										}
										else
										{
											<i class="mdi mdi-arrow-down"></i>
										}
									}
									else
									{
										<i class="mdi mdi-color-helper"></i>
									}
								</a>
							</th>
							<th scope="col" class="sort" data-sort="name">
								<a href="@Url.Action("Index","Work",new{startDate = ViewBag.StartDate,endDate=ViewBag.EndDate,machineId=ViewBag.SelectedMachineId,machinePartId= ViewBag.SelectedMachinePartId, isClosed = ViewBag.IsClosed,userId = ViewBag.SelectedUserId,sortBy="userId",sortOrder=Context.Request.Query["sortOrder"] == "asc" && Context.Request.Query["sortBy"] == "userId" ? "desc" : "asc"})" style="color:#ffffff !important">
									Personel
									@if (Context.Request.Query["sortBy"] == "userId")
									{
										@if (Context.Request.Query["sortOrder"] == "asc")
										{
											<i class="mdi mdi-arrow-up"></i>
										}
										else
										{
											<i class="mdi mdi-arrow-down"></i>
										}
									}
									else
									{
										<i class="mdi mdi-color-helper"></i>
									}
								</a>


							</th>
							<th scope="col" class="sort" data-sort="name">
								<a href="@Url.Action("Index","Work",new{startDate = ViewBag.StartDate,endDate=ViewBag.EndDate,machineId=ViewBag.SelectedMachineId,machinePartId= ViewBag.SelectedMachinePartId, isClosed = ViewBag.IsClosed,userId = ViewBag.SelectedUserId,sortBy="isClosed",sortOrder=Context.Request.Query["sortOrder"] == "asc" && Context.Request.Query["sortBy"] == "isClosed" ? "desc" : "asc"})" style="color:#ffffff !important">
									İş emri sonlandı mı
									@if (Context.Request.Query["sortBy"] == "isClosed")
									{
										@if (Context.Request.Query["sortOrder"] == "asc")
										{
											<i class="mdi mdi-arrow-up"></i>
										}
										else
										{
											<i class="mdi mdi-arrow-down"></i>
										}
									}
									else
									{
										<i class="mdi mdi-color-helper"></i>
									}
								</a>


							</th>

							<!--<th scope="col">İş Emri Raporu</th>-->
							<th scope="col">İşlemler</th>

						</tr>
					</thead>
					<tbody class="list">
						@foreach (var item in Model)
						{
							<tr data-id="@item.id">
								@*<td>@item.id</td>*@
								<td scope="row">
									<div class="media align-items-center">
										<div class="media-body">
											<span class="name mb-0 text-sm">@item.title</span>
										</div>
									</div>
								</td>
								<td scope="row">
									<div class="media align-items-center">
										<div class="media-body">
											<span class="name mb-0 text-sm">
												@(item.workOrderStartDate.HasValue ? item.workOrderStartDate.Value.ToString("dd-MM-yyyy HH:mm:ss") : "Tarih Yok")
											</span>
										</div>
									</div>
								</td>
								<td scope="row">
									<div class="media align-items-center">
										<div class="media-body">
											<span class="name mb-0 text-sm">
												@(item.workOrderEndDate.HasValue ? item.workOrderEndDate.Value.ToString("dd-MM-yyyy HH:mm:ss") : "İş henüz bitmedi")
											</span>
										</div>
									</div>
								</td>
								<td scope="row">
									<div class="media align-items-center">
										<div class="media-body">
											<span class="name mb-0 text-sm">
												@(item.machine?.name ?? "Makine adı belirtilmedi")
											</span>
										</div>
									</div>
								</td>
								<td scope="row">
									<div class="media align-items-center">
										<div class="media-body">
											<span class="name mb-0 text-sm">
												@(item.userI?.UserName ?? "Personel belirtilmedi")
											</span>
										</div>
									</div>
								</td>
								<th scope="row" style="text-align: center; vertical-align: middle;">
									<span class="badge @((item.isClosed) ? "bg-success" : "bg-danger")">
										@((item.isClosed) ? "Tamamlandı" : "Tamamlanmadı")
									</span>
								</th>
								<!--	<td><a href="/Work/WorkReports/@item.id" class="btn btn-outline-primary">İş Emri Raporları</a></td>-->
								<td>
									<a href="/Work/EditWorkOrder/@item.id" class="btn btn-outline-success">Düzenle</a>
									<a href="/Work/RemoveWorkOrder/@item.id" class="btn btn-outline-warning">Sil</a>
								</td>

							</tr>
						}
					</tbody>
				</table>
			</div>
			<div class="card-footer">
			</div>
		</div>
	</div>
</div>
<br />

@{
	var swalMessage = TempData["SwalMessage"] as string;
	var swalType = TempData["SwalType"] as string;
}

@section Scripts {
	<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
	@if (!string.IsNullOrEmpty(swalMessage) && !string.IsNullOrEmpty(swalType))
	{
		// Mark TempData as read so it won't persist
		TempData.Remove("SwalMessage");
		TempData.Remove("SwalType");

		<script>
			Swal.fire({
				icon: '@swalType',
				title: 'Uyarı',
				text: '@Html.Raw(System.Text.Encodings.Web.JavaScriptEncoder.Default.Encode(swalMessage))',
				showConfirmButton: false,
				timer: 2500
			});
		</script>
	}

	<script>
		
		function updateEndDateMin() {
			var startDate = document.getElementById("startDate").value;
			document.getElementById("endDate").min = startDate;
			var endDateInput = document.getElementById("endDate");
			if (endDateInput.value && startDate && endDateInput.value < startDate) {
				endDateInput.value = startDate;
			}
		}

		$(document).ready(function() {
			$('.select2').select2({
				theme: 'bootstrap4',
				width: '100%',
				dropdownParent: $('#filterForm'),
				placeholder: 'Seçiniz...',
				allowClear: true,
				minimumResultsForSearch: Infinity,
				language: {
					noResults: function() {
						return "Sonuç bulunamadı";
					}
				}
			});

			$('#machineId').on('change', function() {
				var selectedMachineId = $(this).val();
				var machinePartDropdown = $('#machinePartId');

				if (selectedMachineId) {
					machinePartDropdown.prop('disabled', true);
					machinePartDropdown.empty().append($('<option>', { value: '', text: 'Yükleniyor...' }));

					$.ajax({
						url: '@Url.Action("GetMachineParts", "Work")',
						type: 'GET',
						dataType: 'json',
						data: { machineId: selectedMachineId },
						success: function(parts) {
							machinePartDropdown.prop('disabled', false);
							machinePartDropdown.empty();
							machinePartDropdown.append($('<option>', { value: '', text: 'Tümü' }));
							machinePartDropdown.append($('<option>', { value: '0', text: 'Makine Parçası Bilgisi Yok' }));
							$.each(parts, function(index, part) {
								machinePartDropdown.append($('<option>', {
									value: part.value,
									text: part.text
								}));
							});
							machinePartDropdown.val('').trigger('change');
						},
						error: function(xhr, status, error) {
							console.error("Makine parçaları alınamadı:", status, error);
							machinePartDropdown.prop('disabled', true);
							machinePartDropdown.empty();
							machinePartDropdown.append($('<option>', { value: '', text: 'Hata - Tümü' }));
							machinePartDropdown.val('').trigger('change');
						}
					});
				} else {
					machinePartDropdown.empty();
					machinePartDropdown.append($('<option>', { value: '', text: 'Tümü' }));
					machinePartDropdown.prop('disabled', true);
					machinePartDropdown.val('').trigger('change');
				}
			});

			if ($('#machineId').val()) {
				$('#machineId').trigger('change');
			}
		});
	</script>

	<script>
		document.getElementById('excelAktarBtn').addEventListener('click', function() {
			const veriSatirlari = document.querySelectorAll('tbody.list tr');
			const siraliIdler = [];

			veriSatirlari.forEach(satir => {
				const id = satir.getAttribute('data-id');
				if (id) {
					siraliIdler.push(id);
				} else {
					console.warn("data-id attribute'u olmayan bir satır bulundu:", satir);
				}
			});

			if (siraliIdler.length === 0) {
				Swal.fire({ 
					icon: 'warning',
					title: 'Uyarı',
					text: 'Aktarılacak veri bulunamadı.',
				});
				return;
			}

			this.disabled = true;
			document.getElementById('loadingIndicator').style.display = 'inline'; 

			
			const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
			const token = tokenInput ? tokenInput.value : null;

			const headers = {
				'Content-Type': 'application/json'
			};
			
			if (token) {
				headers['RequestVerificationToken'] = token;
			}

			fetch('/Work/ExportToExcel', {
				method: 'POST',
				headers: headers,
				body: JSON.stringify(siraliIdler) 
			})
			.then(response => {
				if (!response.ok) {
					return response.text().then(text => {
						throw new Error(`HTTP hatası! Durum: ${response.status} - ${text}`);
					});
				}
				const disposition = response.headers.get('content-disposition');
				let filename = 'is-emirleri.xlsx'; 
				if (disposition && disposition.indexOf('attachment') !== -1) {
					const filenameRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/;
					const matches = filenameRegex.exec(disposition);
					if (matches != null && matches[1]) {
						filename = matches[1].replace(/['"]/g, '');
					}
				}
				return response.blob().then(blob => ({ blob, filename })); 
			})
			.then(({ blob, filename }) => {
				const url = window.URL.createObjectURL(blob);
				const a = document.createElement('a');
				a.style.display = 'none';
				a.href = url;
				a.download = filename; 
				document.body.appendChild(a);
				a.click(); 
				window.URL.revokeObjectURL(url); 
				a.remove(); 
			})
			.catch(error => {
				console.error('Excel dışa aktarma hatası:', error);
				Swal.fire({ 
					icon: 'error',
					title: 'Hata',
					text: 'Excel dosyası oluşturulurken bir hata oluştu: ' + error.message,
				});
			})
			.finally(() => {
				this.disabled = false;
				document.getElementById('loadingIndicator').style.display = 'none';
			});
		});
	</script>
}