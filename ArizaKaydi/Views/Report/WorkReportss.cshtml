@using EntityLayer.Concrete
@model List<work>
@{
	Layout = "~/Views/Shared/_Layout.cshtml";
	bool isMachineSelectedInitially = ViewBag.SelectedMachineId != null && (int)ViewBag.SelectedMachineId > 0;
}
<button id="excelAktarBtn" class="btn btn-success">Excel'e Aktar</button>
@* Excel'e aktarma sırasında gösterilecek loading indicator *@
<div id="loadingIndicator" style="display: none; margin-top: 10px;">
	<span class="text-info">Excel dosyası oluşturuluyor, lütfen bekleyin...</span>
	@* İsterseniz buraya bir spinner ikonu ekleyebilirsiniz, örn: <i class="fa fa-spinner fa-spin"></i> *@
</div>
<br />
<br />
<div class="row mb-4">
	<div class="col-md-12">
		<div class="card bg-default shadow">
			<div class="card-header">
				<h4>Filtreler</h4>
			</div>
			<div class="card-body">
				<form id="filterForm" method="get" action="@Url.Action("WorkReportss", "Report")">
					@Html.AntiForgeryToken()
					<div class="row">
						<div class="col-md-3">
							<div class="form-group">
								<label for="startDate">Başlangıç Tarihi</label>
								<input type="date" id="startDate" name="startDate" class="form-control" value="@ViewBag.StartDate" onchange="updateEndDateMin()">
							</div>
						</div>
						<div class="col-md-3">
							<div class="form-group">
								<label for="endDate">Bitiş Tarihi</label>
								<input type="date" id="endDate" name="endDate" class="form-control" value="@ViewBag.EndDate" min="@ViewBag.StartDate">
							</div>
						</div>
						<div class="col-md-3">
							<div class="form-group">
								<label for="machineId">Makine</label>
								<select id="machineId" name="machineId" class="form-control">
									<option value="">Tümü</option>
									@foreach (var part in (List<machine>)ViewBag.Machines)
									{
										if (ViewBag.SelectedMachineId != null && (int)ViewBag.SelectedMachineId == part.id)
										{
											<option value="@part.id" selected>@part.name</option>
										}
										else
										{
											<option value="@part.id">@part.name</option>
										}

									}
								</select>
							</div>
						</div>
						<div class="col-md-3">
							<div class="form-group">
								<label for="machinePartId">Makine Parçası</label>
								<select id="machinePartId" name="machinePartId" class="form-control" @(!isMachineSelectedInitially ? "disabled" : "")>
									<option value="">Tümü</option>
									@if (isMachineSelectedInitially)
									{
										@foreach (var part in (List<machinePart>)ViewBag.MachineParts)
										{
											if (ViewBag.SelectedMachinePartId != null && (int)ViewBag.SelectedMachinePartId == part.Id)
											{
												<option value="@part.Id" selected>@part.name</option>
											}
											else
											{
												<option value="@part.Id">@part.name</option>
											}

										}
									}


								</select>
							</div>
						</div>
						<div class="col-md-3 d-flex align-items-end">
							<button type="submit" class="btn btn-primary mr-2">Filtrele</button>
							<a href="@Url.Action("WorkReportss", "Report")" class="btn btn-secondary">Filtreleri Temizle</a>
						</div>
					</div>
				</form>
			</div>
		</div>
	</div>
</div>

<div class="row">
	<div class="col">
		<div class="card bg-default shadow">
			<div class="card-header bg-transparent border-0">
				<h3 class="text-white mb-0">İş Emri Raporları </h3>
			</div>
			<div class="table-responsive">
				<table class="table align-items-center table-dark table-flush">
					<thead class="thead-dark">
						<tr>
							<th scope="col" class="sort" data-sort="name">
								<a href="@Url.Action("WorkReportss","Report",new{startDate = ViewBag.StartDate,endDate=ViewBag.EndDate,machineId=ViewBag.SelectedMachineId,machinePartId= ViewBag.SelectedMachinePartId,sortBy="id",sortOrder=Context.Request.Query["sortOrder"] == "asc" && Context.Request.Query["sortBy"] == "id" ? "desc" : "asc"})" style="color:#ffffff !important">
								#
								@if (Context.Request.Query["sortBy"] == "id")
								{
									@if (Context.Request.Query["sortOrder"] == "asc")
									{
										<i class="mdi mdi-arrow-up"></i>
									}
									else
									{
										<i class="mdi mdi-arrow-down"></i>
									}
								}
								else
								{
									<i class="mdi mdi-color-helper"></i>
								}

							</a>
							</th>
							<th scope="col" class="sort" data-sort="name">Rapor Başlığı</th>
							<th scope="col" class="sort" data-sort="name">
								<a href="@Url.Action("WorkReportss","Report",new{startDate = ViewBag.StartDate,endDate=ViewBag.EndDate,machineId=ViewBag.SelectedMachineId,machinePartId= ViewBag.SelectedMachinePartId,sortBy="start",sortOrder=Context.Request.Query["sortOrder"] == "asc" && Context.Request.Query["sortBy"] == "start" ? "desc" : "asc"})" style="color:#ffffff !important">
									İşin alınma tarihi
									@if (Context.Request.Query["sortBy"] == "start")
									{
										@if (Context.Request.Query["sortOrder"] == "asc")
										{
											<i class="mdi mdi-arrow-up"></i>
										}
										else
										{
											<i class="mdi mdi-arrow-down"></i>
										}
									}
									else
									{
										<i class="mdi mdi-color-helper"></i>
									}

								</a>
							</th>
							<th scope="col" class="sort" data-sort="name">
								<a href="@Url.Action("WorkReportss","Report",new{startDate = ViewBag.StartDate,endDate=ViewBag.EndDate,machineId=ViewBag.SelectedMachineId,machinePartId= ViewBag.SelectedMachinePartId,sortBy="end",sortOrder=Context.Request.Query["sortOrder"] == "asc" && Context.Request.Query["sortBy"] == "end" ? "desc" : "asc"})" style="color:#ffffff !important">
									İşin bitiş tarihi
									@if (Context.Request.Query["sortBy"] == "end")
									{
										@if (Context.Request.Query["sortOrder"] == "asc")
										{
											<i class="mdi mdi-arrow-up"></i>
										}
										else
										{
											<i class="mdi mdi-arrow-down"></i>
										}
									}
									else
									{
										<i class="mdi mdi-color-helper"></i>
									}

								</a>
							</th>
							<th scope="col" class="sort" data-sort="name">
								<a href="@Url.Action("WorkReportss","Report",new{startDate = ViewBag.StartDate,endDate=ViewBag.EndDate,machineId=ViewBag.SelectedMachineId,machinePartId= ViewBag.SelectedMachinePartId,sortBy="machineId",sortOrder=Context.Request.Query["sortOrder"] == "asc" && Context.Request.Query["sortBy"] == "machineId" ? "desc" : "asc"})" style="color:#ffffff !important">
									Makine Adı
									@if (Context.Request.Query["sortBy"] == "machineId")
									{
										@if (Context.Request.Query["sortOrder"] == "asc")
										{
											<i class="mdi mdi-arrow-up"></i>
										}
										else
										{
											<i class="mdi mdi-arrow-down"></i>
										}
									}
									else
									{
										<i class="mdi mdi-color-helper"></i>
									}
								</a>
							</th>
							<!--	<th scope="col" class="sort" data-sort="name">Geçmiş Rapor mu</th>-->
							<th scope="col">İş Emri Raporu</th>
							<th scope="col">Sil</th>

						</tr>
					</thead>
					<tbody class="list">
						@foreach (var item in Model)
						{
							<tr data-id="@item.id">
								<td>@item.id</td>
								<td scope="row">
									<div class="media align-items-center">
										<div class="media-body">
											<span class="name mb-0 text-sm">@item.title</span>
										</div>
									</div>
								</td>
								<td scope="row">
									<div class="media align-items-center">
										<div class="media-body">
											<span class="name mb-0 text-sm">@item.workOrderStartDate</span>
										</div>
									</div>
								</td>
								<td scope="row">
									<div class="media align-items-center">
										<div class="media-body">
											<span class="name mb-0 text-sm">@item.workOrderEndDate</span>
										</div>
									</div>
								</td>
								<td scope="row">
									<div class="media align-items-center">
										<div class="media-body">
											<span class="name mb-0 text-sm">@(item.machine?.name?? "Makine bilgisi bulunamadı")</span>
										</div>
									</div>
								</td>
								<!--<th>
									<span class="badge @((item.isPastWork) ? "bg-success" : "bg-danger")">
										@((item.isPastWork) ? "Evet" : "Hayır")
									</span>
								</th>-->
								<td><a href="/Work/SeeWorkReport/@item.id" class="btn btn-outline-primary">Raporu Gör</a></td>
								<td><a href="/Work/DeleteWork/@item.id" class="btn btn-outline-warning">Sil</a></td>
							</tr>
						}



					</tbody>
				</table>

			</div>
		</div>
	</div>
</div>
<br />
@section Scripts{
	<script>
		// Tarih fonksiyonu (varsa)
		function updateEndDateMin() {
			var startDate = document.getElementById("startDate").value;
			document.getElementById("endDate").min = startDate;
			 // Eğer bitiş tarihi başlangıçtan önceyse, bitişi başlangıçla aynı yap
			var endDateInput = document.getElementById("endDate");
			if (endDateInput.value && startDate && endDateInput.value < startDate) {
				endDateInput.value = startDate;
			}
		}

		$(document).ready(function() {
			$('#machineId').on('change', function() {
				var selectedMachineId = $(this).val();
				var machinePartDropdown = $('#machinePartId');

				if (selectedMachineId) {
					// Opsiyonel: AJAX isteği başlarken kullanıcıya geri bildirim ver
					machinePartDropdown.prop('disabled', true).empty().append($('<option>', { value: '', text: 'Yükleniyor...' }));

					$.ajax({
						url: '@Url.Action("GetMachineParts", "Report")',
						type: 'GET',
						dataType: 'json',
						data: { machineId: selectedMachineId },
						success: function(parts) { // parts = [{ Value:"1", Text:"Ad1"}, ...]
							machinePartDropdown.prop('disabled', false); // Başarılı olunca etkinleştir
							machinePartDropdown.empty();
							machinePartDropdown.append($('<option>', { value: '', text: 'Tümü' }));

							$.each(parts, function(index, part) {
								machinePartDropdown.append($('<option>', {
									// *** DÜZELTME: part.value ve part.text KULLAN ***
									value: part.value,
									text: part.text
								}));
							});
							machinePartDropdown.val(''); // "Tümü" seçili kalsın
						},
						error: function(xhr, status, error) {
							console.error("Makine parçaları alınamadı:", status, error);
							// Hata durumunda dropdown'ı sıfırla ve devre dışı bırak
							machinePartDropdown.prop('disabled', true);
							machinePartDropdown.empty();
							machinePartDropdown.append($('<option>', { value: '', text: 'Hata - Tümü' }));
							machinePartDropdown.val('');
						}
					});
				} else { // Makine "Tümü" seçildi
					machinePartDropdown.empty();
					machinePartDropdown.append($('<option>', { value: '', text: 'Tümü' }));
					machinePartDropdown.prop('disabled', true);
					machinePartDropdown.val('');
				}
			});

			 // Sayfa yüklendiğinde tarih ayarını yap
			 if (typeof updateEndDateMin === "function" && $('#startDate').val()) {
				 updateEndDateMin();
			 }

			 // ÖNEMLİ: Sayfa yüklendiğinde makine zaten seçiliyse (filtrelemeden sonra),
			 // parça listesinin doğru görünmesi için Index action'ındaki ViewBag.MachineParts
			 // atamasının doğru yapılması yeterlidir. JavaScript'in tekrar AJAX yapmasına gerek yok.
			 // Bu yüzden sayfa yüklenirken change event'ini tetiklemeye GEREK YOKTUR.
			 // (Eğer Index action'daki ViewBag ataması düzgün çalışıyorsa)

		});
	</script>
	<script>
		document.getElementById('excelAktarBtn').addEventListener('click', function() {
			// *** DEĞİŞİKLİK: Selector'ü güncelledik (tbody class'ı "list") ***
			const veriSatirlari = document.querySelectorAll('tbody.list tr');
			const siraliIdler = [];

			veriSatirlari.forEach(satir => {
				// data-id attribute'undan ID'yi al
				const id = satir.getAttribute('data-id');
				if (id) {
					// ID'nin geçerli bir sayı olup olmadığını kontrol etmek isteyebilirsiniz
					// if(!isNaN(parseInt(id))) { siraliIdler.push(id); }
					siraliIdler.push(id); // Sırayla diziye ekle
				} else {
					console.warn("data-id attribute'u olmayan bir satır bulundu:", satir);
				}
			});

			if (siraliIdler.length === 0) {
				Swal.fire({ // SweetAlert ile daha şık bir uyarı
					icon: 'warning',
					title: 'Uyarı',
					text: 'Aktarılacak veri bulunamadı.',
				});
				return;
			}

			// Butonu devre dışı bırak ve loading göstergesini aç
			this.disabled = true;
			document.getElementById('loadingIndicator').style.display = 'inline'; // veya 'block'

			// AntiForgery Token'ı bul (eğer varsa)
			const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
			const token = tokenInput ? tokenInput.value : null;

			const headers = {
				'Content-Type': 'application/json'
			};
			// Token varsa header'a ekle
			if (token) {
				headers['RequestVerificationToken'] = token;
			}

			// *** DEĞİŞİKLİK: fetch URL'sini projenize göre güncelleyin (Controller: Work, Action: ExportToExcel varsayıldı) ***
			fetch('/Report/ExportToExcel', {
				method: 'POST',
				headers: headers,
				body: JSON.stringify(siraliIdler) // ID listesini JSON formatında gönder
			})
			.then(response => {
				if (!response.ok) {
					// Hata durumunda response'dan metin okumayı dene (daha fazla bilgi için)
					return response.text().then(text => {
						throw new Error(`HTTP hatası! Durum: ${response.status} - ${text}`);
					});
				}
				// Dosya adını Content-Disposition header'ından almayı deneyelim
				const disposition = response.headers.get('content-disposition');
				let filename = 'is-emirleri.xlsx'; // Varsayılan dosya adı
				if (disposition && disposition.indexOf('attachment') !== -1) {
					const filenameRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/;
					const matches = filenameRegex.exec(disposition);
					if (matches != null && matches[1]) {
						filename = matches[1].replace(/['"]/g, '');
					}
				}
				// Yanıt başarılıysa, dosya indirme işlemini tetikle
				return response.blob().then(blob => ({ blob, filename })); // Blob ve dosya adını birlikte döndür
			})
			.then(({ blob, filename }) => {
				// Blob'dan bir URL oluştur ve indirme linki yarat
				const url = window.URL.createObjectURL(blob);
				const a = document.createElement('a');
				a.style.display = 'none';
				a.href = url;
				a.download = filename; // Sunucudan gelen veya varsayılan dosya adı
				document.body.appendChild(a);
				a.click(); // İndirmeyi tetikle
				window.URL.revokeObjectURL(url); // Oluşturulan URL'yi temizle
				a.remove(); // Linki kaldır
			})
			.catch(error => {
				console.error('Excel dışa aktarma hatası:', error);
				Swal.fire({ // Hata durumunda SweetAlert ile uyarı
					icon: 'error',
					title: 'Hata',
					text: 'Excel dosyası oluşturulurken bir hata oluştu: ' + error.message,
				});
			})
			.finally(() => {
				// İşlem bitince butonu tekrar aktif et ve loading göstergesini kapat
				this.disabled = false;
				document.getElementById('loadingIndicator').style.display = 'none';
			});
		});
	</script>
}

